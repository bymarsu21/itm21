     <?php
     
     // ---------------------------------------------------------------------
     // WARNING: Do not edit this file! Copy configuration to config.inc.php.
     // ---------------------------------------------------------------------
     
     /*
      +-----------------------------------------------------------------------+
      | Default settings for all configuration options                        |
     |                                                                       |
     | This file is part of the Roundcube Webmail client                     |
     | Copyright (C) The Roundcube Dev Team                                  |
     |                                                                       |
     | Licensed under the GNU General Public License version 3 or            |
     | any later version with exceptions for skins & plugins.                |
     | See the README file for a full license statement.                     |
     +-----------------------------------------------------------------------+
    */
    
    $config = [];
    
    // ----------------------------------
    // SQL DATABASE
    // ----------------------------------
    
    // Database connection string (DSN) for read+write operations
    // Format (compatible with PEAR MDB2): db_provider://user:password@host/database
    // Currently supported db_providers: mysql, pgsql, sqlite, mssql, sqlsrv, oracle
    // For examples see http://pear.php.net/manual/en/package.database.mdb2.intro-dsn.php
    // Note: for SQLite use absolute path (Linux): 'sqlite:////full/path/to/sqlite.db?mode=0646'
    //       or (Windows): 'sqlite:///C:/full/path/to/sqlite.db'
    // Note: Various drivers support various additional arguments for connection,
    //       for Mysql: key, cipher, cert, capath, ca, verify_server_cert,
    //       for Postgres: application_name, sslmode, sslcert, sslkey, sslrootcert, sslcrl, sslcompression, service.
    //       e.g. 'mysql://roundcube:@localhost/roundcubemail?verify_server_cert=false'
    $config['db_dsnw'] = 'mysql://roundcube:@localhost/roundcubemail';
    
    // Database DSN for read-only operations (if empty write database will be used)
    // useful for database replication
    $config['db_dsnr'] = '';
    
    // Disable the use of already established dsnw connections for subsequent reads
    $config['db_dsnw_noread'] = false;
    
    // use persistent db-connections
    // beware this will not "always" work as expected
    // see: http://www.php.net/manual/en/features.persistent-connections.php
    $config['db_persistent'] = false;
    
   // you can define specific table (and sequence) names prefix
   $config['db_prefix'] = '';
   
   // Mapping of table names and connections to use for ALL operations.
   // This can be used in a setup with replicated databases and a DB master
    // where read/write access to cache tables should not go to master.
    $config['db_table_dsn'] = [
    //    'cache' => 'r',
    //    'cache_index' => 'r',
    //    'cache_thread' => 'r',
    //    'cache_messages' => 'r',
    ];
    
    // It is possible to specify database variable values e.g. some limits here.
    // Use them if your server is not MySQL or for better performance.
    // For example Roundcube uses max_allowed_packet value (in bytes)
    // which limits query size for database cache operations.
    $config['db_max_allowed_packet'] = null;
    
    
    // ----------------------------------
    // LOGGING/DEBUGGING
    // ----------------------------------
    
    // log driver:  'syslog', 'stdout' or 'file'.
    $config['log_driver'] = 'file';
    
    // date format for log entries
    // (read http://php.net/manual/en/function.date.php for all format characters)
    $config['log_date_format'] = 'd-M-Y H:i:s O';
    
    // length of the session ID to prepend each log line with
    // set to 0 to avoid session IDs being logged.
    $config['log_session_id'] = 8;
    
    // Default extension used for log file name
    $config['log_file_ext'] = '.log';
    
    // Syslog ident string to use, if using the 'syslog' log driver.
    $config['syslog_id'] = 'roundcube';
    
    // Syslog facility to use, if using the 'syslog' log driver.
    // For possible values see installer or http://php.net/manual/en/function.openlog.php
    $config['syslog_facility'] = LOG_USER;
    
    // Activate this option if logs should be written to per-user directories.
    // Data will only be logged if a directory <log_dir>/<username>/ exists and is writable.
    $config['per_user_logging'] = false;
    
    // Log sent messages to <log_dir>/sendmail.log or to syslog
   $config['smtp_log'] = true;
   
   // Log successful/failed logins to <log_dir>/userlogins.log or to syslog
   $config['log_logins'] = false;
   
   // Log session debug information/authentication errors to <log_dir>/session.log or to syslog
   $config['session_debug'] = false;
   
   // Log SQL queries to <log_dir>/sql.log or to syslog
  109 $config['sql_debug'] = false;
  110 
  111 // Log IMAP conversation to <log_dir>/imap.log or to syslog
  112 $config['imap_debug'] = false;
  113 
  114 // Log LDAP conversation to <log_dir>/ldap.log or to syslog
  115 $config['ldap_debug'] = false;
  116 
  117 // Log SMTP conversation to <log_dir>/smtp.log or to syslog
  118 $config['smtp_debug'] = false;
  119 
  120 // Log Memcache conversation to <log_dir>/memcache.log or to syslog
  121 $config['memcache_debug'] = false;
  122 
  123 // Log APC conversation to <log_dir>/apc.log or to syslog
  124 $config['apc_debug'] = false;
  125 
  126 // Log Redis conversation to <log_dir>/redis.log or to syslog
  127 $config['redis_debug'] = false;
  128 
  129 
  130 // ----------------------------------
  131 // IMAP
  132 // ----------------------------------
  133 
  134 // The IMAP host chosen to perform the log-in.
  135 // Leave blank to show a textbox at login, give a list of hosts
  136 // to display a pulldown menu or set one host as string.
  137 // Enter hostname with prefix ssl:// to use Implicit TLS, or use
  138 // prefix tls:// to use STARTTLS.
  139 // Supported replacement variables:
  140 // %n - hostname ($_SERVER['SERVER_NAME'])
  141 // %t - hostname without the first part
  142 // %d - domain (http hostname $_SERVER['HTTP_HOST'] without the first part)
  143 // %s - domain name after the '@' from e-mail address provided at login screen
  144 // For example %n = mail.domain.tld, %t = domain.tld
  145 // WARNING: After hostname change update of mail_host column in users table is
  146 //          required to match old user data records with the new host.
  147 $config['default_host'] = 'localhost';
  148 
  149 // TCP port used for IMAP connections
  150 $config['default_port'] = 143;
  151 
  152 // IMAP authentication method (DIGEST-MD5, CRAM-MD5, LOGIN, PLAIN or null).
  153 // Use 'IMAP' to authenticate with IMAP LOGIN command.
  154 // By default the most secure method (from supported) will be selected.
  155 $config['imap_auth_type'] = null;
  156 
  157 // IMAP socket context options
  158 // See http://php.net/manual/en/context.ssl.php
  159 // The example below enables server certificate validation
  160 //$config['imap_conn_options'] = [
  161 //  'ssl'         => [
  162 //     'verify_peer'  => true,
  163 //     'verify_depth' => 3,
  164 //     'cafile'       => '/etc/openssl/certs/ca.crt',
  165 //   ],
  166 // ];
  167 // Note: These can be also specified as an array of options indexed by hostname
  168 $config['imap_conn_options'] = null;
  169 
  170 // IMAP connection timeout, in seconds. Default: 0 (use default_socket_timeout)
  171 $config['imap_timeout'] = 0;
  172 
  173 // Optional IMAP authentication identifier to be used as authorization proxy
  174 $config['imap_auth_cid'] = null;
  175 
  176 // Optional IMAP authentication password to be used for imap_auth_cid
  177 $config['imap_auth_pw'] = null;
  178 
  179 // If you know your imap's folder delimiter, you can specify it here.
  180 // Otherwise it will be determined automatically
  181 $config['imap_delimiter'] = null;
  182 
  183 // If you know your imap's folder vendor, you can specify it here.
  184 // Otherwise it will be determined automatically. Use lower-case
  185 // identifiers, e.g. 'dovecot', 'cyrus', 'gimap', 'hmail', 'uw-imap'.
  186 $config['imap_vendor'] = null;
  187 
  188 // If IMAP server doesn't support NAMESPACE extension, but you're
  189 // using shared folders or personal root folder is non-empty, you'll need to
  190 // set these options. All can be strings or arrays of strings.
  191 // Note: Folders need to be ended with directory separator, e.g. "INBOX."
  192 //       (special directory "~" is an exception to this rule)
  193 // Note: These can be used also to overwrite server's namespaces
  194 // Note: Set these to FALSE to disable access to specified namespace
  195 $config['imap_ns_personal'] = null;
  196 $config['imap_ns_other']    = null;
  197 $config['imap_ns_shared']   = null;
  198 
  199 // By default IMAP capabilities are read after connection to IMAP server
  200 // In some cases, e.g. when using IMAP proxy, there's a need to refresh the list
  201 // after login. Set to True if you've got this case.
  202 $config['imap_force_caps'] = false;
  203 
  204 // By default list of subscribed folders is determined using LIST-EXTENDED
  205 // extension if available. Some servers (dovecot 1.x) returns wrong results
  206 // for shared namespaces in this case. https://github.com/roundcube/roundcubemail/issues/2474
  207 // Enable this option to force LSUB command usage instead.
  208 // Deprecated: Use imap_disabled_caps = ['LIST-EXTENDED']
  209 $config['imap_force_lsub'] = false;
  210 
  211 // Some server configurations (e.g. Courier) doesn't list folders in all namespaces
  212 // Enable this option to force listing of folders in all namespaces
  213 $config['imap_force_ns'] = false;
  214 
  215 // Some servers return hidden folders (name starting with a dot)
  216 // from user home directory. IMAP RFC does not forbid that.
  217 // Enable this option to hide them and disable possibility to create such.
  218 $config['imap_skip_hidden_folders'] = false;
  219 
  220 // Some servers do not support folders with both folders and messages inside
  221 // If your server supports that use true, if it does not, use false.
  222 // By default it will be determined automatically (once per user session).
  223 $config['imap_dual_use_folders'] = null;
  224 
  225 // List of disabled imap extensions.
  226 // Use if your IMAP server has broken implementation of some feature
  227 // and you can't remove it from CAPABILITY string on server-side.
  228 // For example UW-IMAP server has broken ESEARCH.
  229 // Note: Because the list is cached, re-login is required after change.
  230 $config['imap_disabled_caps'] = [];
  231 
  232 // Log IMAP session identifiers after each IMAP login.
  233 // This is used to relate IMAP session with Roundcube user sessions
  234 $config['imap_log_session'] = false;
  235 
  236 // Type of IMAP indexes cache. Supported values: 'db', 'apc' and 'memcache' or 'memcached'.
  237 $config['imap_cache'] = null;
  238 
  239 // Enables messages cache. Only 'db' cache is supported.
  240 // This requires an IMAP server that supports QRESYNC and CONDSTORE
  241 // extensions (RFC7162). See synchronize() in program/lib/Roundcube/rcube_imap_cache.php
  242 // for further info, or if you experience syncing problems.
  243 $config['messages_cache'] = false;
  244 
  245 // Lifetime of IMAP indexes cache. Possible units: s, m, h, d, w
  246 $config['imap_cache_ttl'] = '10d';
  247 
  248 // Lifetime of messages cache. Possible units: s, m, h, d, w
  249 $config['messages_cache_ttl'] = '10d';
  250 
  251 // Maximum cached message size in kilobytes.
  252 // Note: On MySQL this should be less than (max_allowed_packet - 30%)
  253 $config['messages_cache_threshold'] = 50;
  254 
  255 
  256 // ----------------------------------
  257 // SMTP
  258 // ----------------------------------
  259 
  260 // SMTP server host (for sending mails).
  261 // Enter hostname with prefix ssl:// to use Implicit TLS, or use
  262 // prefix tls:// to use STARTTLS.
  263 // Supported replacement variables:
  264 // %h - user's IMAP hostname
  265 // %n - hostname ($_SERVER['SERVER_NAME'])
  266 // %t - hostname without the first part
  267 // %d - domain (http hostname $_SERVER['HTTP_HOST'] without the first part)
  268 // %z - IMAP domain (IMAP hostname without the first part)
  269 // For example %n = mail.domain.tld, %t = domain.tld
  270 // To specify different SMTP servers for different IMAP hosts provide an array
  271 // of IMAP host (no prefix or port) and SMTP server e.g. ['imap.example.com' => 'smtp.example.net']
  272 $config['smtp_server'] = 'localhost';
  273 
  274 // SMTP port. Use 25 for cleartext, 465 for Implicit TLS, or 587 for STARTTLS (default)
  275 $config['smtp_port'] = 587;
  276 
  277 // SMTP username (if required) if you use %u as the username Roundcube
  278 // will use the current username for login
  279 $config['smtp_user'] = '%u';
  280 
  281 // SMTP password (if required) if you use %p as the password Roundcube
  282 // will use the current user's password for login
  283 $config['smtp_pass'] = '%p';
  284 
  285 // SMTP AUTH type (DIGEST-MD5, CRAM-MD5, LOGIN, PLAIN or empty to use
  286 // best server supported one)
  287 $config['smtp_auth_type'] = null;
  288 
  289 // Optional SMTP authentication identifier to be used as authorization proxy
  290 $config['smtp_auth_cid'] = null;
  291 
  292 // Optional SMTP authentication password to be used for smtp_auth_cid
  293 $config['smtp_auth_pw'] = null;
  294 
  295 // Pass the username (XCLIENT LOGIN) to the server
  296 $config['smtp_xclient_login'] = false;
  297 
  298 // Pass the remote IP (XCLIENT ADDR) to the server
  299 $config['smtp_xclient_addr'] = false;
  300 
  301 
  302 // SMTP HELO host
  303 // Hostname to give to the remote server for SMTP 'HELO' or 'EHLO' messages
  304 // Leave this blank and you will get the server variable 'server_name' or
  305 // localhost if that isn't defined.
  306 $config['smtp_helo_host'] = '';
  307 
  308 // SMTP connection timeout, in seconds. Default: 0 (use default_socket_timeout)
  309 // Note: There's a known issue where using ssl connection with
  310 // timeout > 0 causes connection errors (https://bugs.php.net/bug.php?id=54511)
  311 $config['smtp_timeout'] = 0;
  312 
  313 // SMTP socket context options
  314 // See http://php.net/manual/en/context.ssl.php
  315 // The example below enables server certificate validation, and
  316 // requires 'smtp_timeout' to be non zero.
  317 // $config['smtp_conn_options'] = [
  318 //   'ssl'         => [
  319 //     'verify_peer'  => true,
  320 //     'verify_depth' => 3,
  321 //     'cafile'       => '/etc/openssl/certs/ca.crt',
  322 //   ],
  323 // ];
  324 // Note: These can be also specified as an array of options indexed by hostname
  325 $config['smtp_conn_options'] = null;
  326 
  327 
  328 // ----------------------------------
  329 // OAuth
  330 // ----------------------------------
  331 
  332 // Enable OAuth2 by defining a provider. Use 'generic' here
  333 $config['oauth_provider'] = null;
  334 
  335 // Provider name to be displayed on the login button
  336 $config['oauth_provider_name'] = 'Google';
  337 
  338 // Mandatory: OAuth client ID for your Roundcube installation
  339 $config['oauth_client_id'] = null;
  340 
  341 // Mandatory: OAuth client secret
  342 $config['oauth_client_secret'] = null;
  343 
  344 // Mandatory: URI for OAuth user authentication (redirect)
  345 $config['oauth_auth_uri'] = null;
  346 
  347 // Mandatory: Endpoint for OAuth authentication requests (server-to-server)
  348 $config['oauth_token_uri'] = null;
  349 
  350 // Optional: Endpoint to query user identity if not provided in auth response
  351 $config['oauth_identity_uri'] = null;
  352 
  353 // Optional: disable SSL certificate check on HTTP requests to OAuth server
  354 // See http://docs.guzzlephp.org/en/stable/request-options.html#verify for possible values
  355 $config['oauth_verify_peer'] = true;
  356 
  357 // Mandatory: OAuth scopes to request (space-separated string)
  358 $config['oauth_scope'] = null;
  359 
  360 // Optional: additional query parameters to send with login request (hash array)
  361 $config['oauth_auth_parameters'] = [];
  362 
  363 // Optional: array of field names used to resolve the username within the identity information
  364 $config['oauth_identity_fields'] = null;
  365 
  366 // Boolean: automatically redirect to OAuth login when opening Roundcube without a valid session
  367 $config['oauth_login_redirect'] = false;
  368 
  369 ///// Example config for Gmail
  370 
  371 // Register your service at https://console.developers.google.com/
  372 // - use https://<your-roundcube-url>/index.php/login/oauth as redirect URL
  373 
  374 // $config['default_host'] = 'ssl://imap.gmail.com';
  375 // $config['oauth_provider'] = 'google';
  376 // $config['oauth_provider_name'] = 'Google';
  377 // $config['oauth_client_id'] = "<your-credentials-client-id>";
  378 // $config['oauth_client_secret'] = "<your-credentials-client-secret>";
  379 // $config['oauth_auth_uri'] = "https://accounts.google.com/o/oauth2/auth";
  380 // $config['oauth_token_uri'] = "https://oauth2.googleapis.com/token";
  381 // $config['oauth_identity_uri'] = 'https://www.googleapis.com/oauth2/v1/userinfo';
  382 // $config['oauth_scope'] = "email profile openid https://mail.google.com/";
  383 // $config['oauth_auth_parameters'] = ['access_type' => 'offline', 'prompt' => 'consent'];
  384 
  385 ///// Example config for Outlook.com (Office 365)
  386 
  387 // Register your OAuth client at https://portal.azure.com
  388 // - use https://<your-roundcube-url>/index.php/login/oauth as redirect URL
  389 // - grant permissions to Microsoft Graph API "IMAP.AccessAsUser.All", "SMTP.Send", "User.Read" and "offline_access"
  390 
  391 // $config['default_host'] = 'ssl://outlook.office365.com';
  392 // $config['smtp_server'] = 'ssl://smtp.office365.com';
  393 
  394 // $config['oauth_provider'] = 'outlook';
  395 // $config['oauth_provider_name'] = 'Outlook.com';
  396 // $config['oauth_client_id'] = "<your-credentials-client-id>";
  397 // $config['oauth_client_secret'] = "<your-credentials-client-secret>";
  398 // $config['oauth_auth_uri'] = "https://login.microsoftonline.com/common/oauth2/v2.0/authorize";
  399 // $config['oauth_token_uri'] = "https://login.microsoftonline.com/common/oauth2/v2.0/token";
  400 // $config['oauth_identity_uri'] = "https://graph.microsoft.com/v1.0/me";
  401 // $config['oauth_identity_fields'] = ['email', 'userPrincipalName'];
  402 // $config['oauth_scope'] = "https://outlook.office365.com/IMAP.AccessAsUser.All https://outlook.office365.com/SMTP.Send User.Read offline_access";
  403 // $config['oauth_auth_parameters'] = ['nonce' => mt_rand()];
  404 
  405 // ----------------------------------
  406 // LDAP
  407 // ----------------------------------
  408 
  409 // Type of LDAP cache. Supported values: 'db', 'apc' and 'memcache' or 'memcached'.
  410 $config['ldap_cache'] = 'db';
  411 
  412 // Lifetime of LDAP cache. Possible units: s, m, h, d, w
  413 $config['ldap_cache_ttl'] = '10m';
  414 
  415 
  416 // ----------------------------------
  417 // CACHE(S)
  418 // ----------------------------------
  419 
  420 // Use these hosts for accessing memcached
  421 // Define any number of hosts in the form of hostname:port or unix:///path/to/socket.file
  422 // Example: ['localhost:11211', '192.168.1.12:11211', 'unix:///var/tmp/memcached.sock'];
  423 $config['memcache_hosts'] = null;
  424 
  425 // Controls the use of a persistent connections to memcache servers
  426 // See http://php.net/manual/en/memcache.addserver.php
  427 $config['memcache_pconnect'] = true;
  428 
  429 // Value in seconds which will be used for connecting to the daemon
  430 // See http://php.net/manual/en/memcache.addserver.php
  431 $config['memcache_timeout'] = 1;
  432 
  433 // Controls how often a failed server will be retried (value in seconds).
  434 // Setting this parameter to -1 disables automatic retry.
  435 // See http://php.net/manual/en/memcache.addserver.php
  436 $config['memcache_retry_interval'] = 15;
  437 
  438 // Use these hosts for accessing Redis.
  439 // Currently only one host is supported. Cluster support may come in a future release.
  440 // You can pass 4 fields, host, port (optional), database (optional) and password (optional).
  441 // Unset fields will be set to the default values host=127.0.0.1, port=6379.
  442 // Examples:
  443 //     ['localhost:6379'];
  444 //     ['192.168.1.1:6379:1:secret'];
  445 //     ['unix:///var/run/redis/redis-server.sock:1:secret'];
  446 $config['redis_hosts'] = null;
  447 
  448 // Maximum size of an object in memcache (in bytes). Default: 2MB
  449 $config['memcache_max_allowed_packet'] = '2M';
  450 
  451 // Maximum size of an object in APC cache (in bytes). Default: 2MB
  452 $config['apc_max_allowed_packet'] = '2M';
  453 
  454 // Maximum size of an object in Redis cache (in bytes). Default: 2MB
  455 $config['redis_max_allowed_packet'] = '2M';
  456 
  457 
  458 // ----------------------------------
  459 // SYSTEM
  460 // ----------------------------------
  461 
  462 // THIS OPTION WILL ALLOW THE INSTALLER TO RUN AND CAN EXPOSE SENSITIVE CONFIG DATA.
  463 // ONLY ENABLE IT IF YOU'RE REALLY SURE WHAT YOU'RE DOING!
  464 $config['enable_installer'] = false;
  465 
  466 // don't allow these settings to be overridden by the user
  467 $config['dont_override'] = [];
  468 
  469 // List of disabled UI elements/actions
  470 $config['disabled_actions'] = [];
  471 
  472 // define which settings should be listed under the 'advanced' block
  473 // which is hidden by default
  474 $config['advanced_prefs'] = [];
  475 
  476 // provide an URL where a user can get support for this Roundcube installation
  477 // PLEASE DO NOT LINK TO THE ROUNDCUBE.NET WEBSITE HERE!
  478 $config['support_url'] = '';
  479 
  480 // Location of the blank (watermark) frame page. By default it is the watermark.html
  481 // file from the currently selected skin. Prepend name/path with a slash to use
  482 // current skin folder. Remove the slash to point to a file in the Roundcube
  483 // root directory. It can be also a full URL.
  484 $config['blankpage_url'] = '/watermark.html';
  485 
  486 // Logo image replacement. Specifies location of the image as:
  487 // - URL relative to the document root of this Roundcube installation
  488 // - full URL with http:// or https:// prefix
  489 // - URL relative to the current skin folder (when starts with a '/')
  490 //
  491 // An array can be used to specify different logos for specific template files
  492 // The array key specifies the place(s) the logo should be applied to and
  493 // is made up of (up to) 3 parts:
  494 // - skin name prefix (always with colon, can be replaced with *)
  495 // - template name (or * for all templates)
  496 // - logo type - it is used for logos used on multiple templates
  497 //   the available types include '[favicon]' for favicon, '[print]' for logo on all print
  498 //   templates (e.g. messageprint, contactprint) and '[small]' for small screen logo in supported skins
  499 //   '[dark]' and '[small-dark]' for dark mode logo in supported skins
  500 //
  501 // Example config for skin_logo
  502 /*
  503    [
  504      // show the image /images/logo_login_small.png for the Login screen in the Elastic skin on small screens
  505      "elastic:login[small]" => "/images/logo_login_small.png",
  506      // show the image /images/logo_login.png for the Login screen in the Elastic skin
  507      "elastic:login" => "/images/logo_login.png",
  508      // show the image /images/logo_small.png in the Elastic skin
  509      "elastic:*[small]" => "/images/logo_small.png",
  510      // show the image /images/larry.png in the Larry skin
  511      "larry:*" => "/images/larry.png",
  512      // show the image /images/logo_login.png on the login template in all skins
  513      "login" => "/images/logo_login.png",
  514      // show the image /images/logo_print.png for all print type logos in all skins
  515      "[print]" => "/images/logo_print.png",
  516    ];
  517 */
  518 $config['skin_logo'] = null;
  519 
  520 // Automatically register user in Roundcube database on successful (IMAP) logon.
  521 // Set to false if only registered users should be allowed to the webmail.
  522 // Note: If disabled you have to create records in Roundcube users table by yourself.
  523 // Note: Roundcube does not manage/create users on a mail server.
  524 $config['auto_create_user'] = true;
  525 
  526 // Enables possibility to log in using email address from user identities
  527 $config['user_aliases'] = false;
  528 
  529 // use this folder to store log files
  530 // must be writeable for the user who runs PHP process (Apache user if mod_php is being used)
  531 // This is used by the 'file' log driver.
  532 $config['log_dir'] = RCUBE_INSTALL_PATH . 'logs/';
  533 
  534 // Location of temporary saved files such as attachments and cache files
  535 // must be writeable for the user who runs PHP process (Apache user if mod_php is being used)
  536 $config['temp_dir'] = RCUBE_INSTALL_PATH . 'temp/';
  537 
  538 // expire files in temp_dir after 48 hours
  539 // possible units: s, m, h, d, w
  540 $config['temp_dir_ttl'] = '48h';
  541 
  542 // Enforce connections over https
  543 // With this option enabled, all non-secure connections will be redirected.
  544 // It can be also a port number, hostname or hostname:port if they are
  545 // different than default HTTP_HOST:443
  546 $config['force_https'] = false;
  547 
  548 // tell PHP that it should work as under secure connection
  549 // even if it doesn't recognize it as secure ($_SERVER['HTTPS'] is not set)
  550 // e.g. when you're running Roundcube behind a https proxy
  551 // this option is mutually exclusive to 'force_https' and only either one of them should be set to true.
  552 $config['use_https'] = false;
  553 
  554 // Allow browser-autocompletion on login form.
  555 // 0 - disabled, 1 - username and host only, 2 - username, host, password
  556 $config['login_autocomplete'] = 0;
  557 
  558 // Forces conversion of logins to lower case.
  559 // 0 - disabled, 1 - only domain part, 2 - domain and local part.
  560 // If users authentication is case-insensitive this must be enabled.
  561 // Note: After enabling it all user records need to be updated, e.g. with query:
  562 //       UPDATE users SET username = LOWER(username);
  563 $config['login_lc'] = 2;
  564 
  565 // Maximum length (in bytes) of logon username and password.
  566 $config['login_username_maxlen'] = 1024;
  567 $config['login_password_maxlen'] = 1024;
  568 
  569 // Logon username filter. Regular expression for use with preg_match().
  570 // Use special value 'email' if you accept only full email addresses as user logins.
  571 // Example: '/^[a-z0-9_@.-]+$/'
  572 $config['login_username_filter'] = null;
  573 
  574 // Brute-force attacks prevention.
  575 // The value specifies maximum number of failed logon attempts per minute.
  576 $config['login_rate_limit'] = 3;
  577 
  578 // Includes should be interpreted as PHP files
  579 $config['skin_include_php'] = false;
  580 
  581 // display product name and software version on login screen
  582 // 0 - hide product name and version number, 1 - show product name only, 2 - show product name and version number
  583 $config['display_product_info'] = 1;
  584 
  585 // Session lifetime in minutes
  586 $config['session_lifetime'] = 10;
  587 
  588 // Session domain: .example.org
  589 $config['session_domain'] = '';
  590 
  591 // Session name. Default: 'roundcube_sessid'
  592 $config['session_name'] = null;
  593 
  594 // Session authentication cookie name. Default: 'roundcube_sessauth'
  595 $config['session_auth_name'] = null;
  596 
  597 // Session path. Defaults to PHP session.cookie_path setting.
  598 $config['session_path'] = null;
  599 
  600 // Session samesite. Defaults to PHP session.cookie_samesite setting.
  601 // Requires PHP >= 7.3.0, see https://wiki.php.net/rfc/same-site-cookie for more info
  602 // Possible values: null (default), 'Lax', or 'Strict'
  603 $config['session_samesite'] = null;
  604 
  605 // Backend to use for session storage. Can either be 'db' (default), 'redis', 'memcache', or 'php'
  606 //
  607 // If set to 'memcache' or 'memcached', a list of servers need to be specified in 'memcache_hosts'
  608 // Make sure the Memcache extension (https://pecl.php.net/package/memcache) version >= 2.0.0
  609 // or the Memcached extension (https://pecl.php.net/package/memcached) version >= 2.0.0 is installed.
  610 //
  611 // If set to 'redis', a server needs to be specified in 'redis_hosts'
  612 // Make sure the Redis extension (https://pecl.php.net/package/redis) version >= 2.0.0 is installed.
  613 //
  614 // Setting this value to 'php' will use the default session save handler configured in PHP
  615 $config['session_storage'] = 'db';
  616 
  617 // List of trusted proxies
  618 // X_FORWARDED_* and X_REAL_IP headers are only accepted from these IPs
  619 $config['proxy_whitelist'] = [];
  620 
  621 // List of trusted host names
  622 // Attackers can modify Host header of the HTTP request causing $_SERVER['SERVER_NAME']
  623 // or $_SERVER['HTTP_HOST'] variables pointing to a different host, that could be used
  624 // to collect user names and passwords. Some server configurations prevent that, but not all.
  625 // An empty list accepts any host name. The list can contain host names
  626 // or PCRE patterns (without // delimiters, that will be added automatically).
  627 $config['trusted_host_patterns'] = [];
  628 
  629 // check client IP in session authorization
  630 $config['ip_check'] = false;
  631 
  632 // X-Frame-Options HTTP header value sent to prevent from Clickjacking.
  633 // Possible values: sameorigin|deny|allow-from <uri>.
  634 // Set to false in order to disable sending the header.
  635 $config['x_frame_options'] = 'sameorigin';
  636 
  637 // This key is used for encrypting purposes, like storing of imap password
  638 // in the session. For historical reasons it's called DES_key, but it's used
  639 // with any configured cipher_method (see below).
  640 // For the default cipher_method a required key length is 24 characters.
  641 $config['des_key'] = 'rcmail-!24ByteDESkey*Str';
  642 
  643 // Encryption algorithm. You can use any method supported by OpenSSL.
  644 // Default is set for backward compatibility to DES-EDE3-CBC,
  645 // but you can choose e.g. AES-256-CBC which we consider a better choice.
  646 $config['cipher_method'] = 'DES-EDE3-CBC';
  647 
  648 // Automatically add this domain to user names for login
  649 // Only for IMAP servers that require full e-mail addresses for login
  650 // Specify an array with 'host' => 'domain' values to support multiple hosts
  651 // Supported replacement variables:
  652 // %h - user's IMAP hostname
  653 // %n - hostname ($_SERVER['SERVER_NAME'])
  654 // %t - hostname without the first part
  655 // %d - domain (http hostname $_SERVER['HTTP_HOST'] without the first part)
  656 // %z - IMAP domain (IMAP hostname without the first part)
  657 // For example %n = mail.domain.tld, %t = domain.tld
  658 $config['username_domain'] = '';
  659 
  660 // Force domain configured in username_domain to be used for login.
  661 // Any domain in username will be replaced by username_domain.
  662 $config['username_domain_forced'] = false;
  663 
  664 // This domain will be used to form e-mail addresses of new users
  665 // Specify an array with 'host' => 'domain' values to support multiple hosts
  666 // Supported replacement variables:
  667 // %h - user's IMAP hostname
  668 // %n - http hostname ($_SERVER['SERVER_NAME'])
  669 // %d - domain (http hostname without the first part)
  670 // %z - IMAP domain (IMAP hostname without the first part)
  671 // For example %n = mail.domain.tld, %t = domain.tld
  672 $config['mail_domain'] = '';
  673 
  674 // Password character set, to change the password for user
  675 // authentication or for password change operations
  676 $config['password_charset'] = 'UTF-8';
  677 
  678 // How many seconds must pass between emails sent by a user
  679 $config['sendmail_delay'] = 0;
  680 
  681 // Message size limit. Note that SMTP server(s) may use a different value.
  682 // This limit is verified when user attaches files to a composed message.
  683 // Size in bytes (possible unit suffix: K, M, G)
  684 $config['max_message_size'] = '100M';
  685 
  686 // Maximum number of recipients per message (including To, Cc, Bcc).
  687 // Default: 0 (no limit)
  688 $config['max_recipients'] = 0;
  689 
  690 // Maximum number of recipients per message excluding Bcc header.
  691 // This is a soft limit, which means we only display a warning to the user.
  692 // Default: 5
  693 $config['max_disclosed_recipients'] = 5;
  694 
  695 // Maximum allowed number of members of an address group. Default: 0 (no limit)
  696 // If 'max_recipients' is set this value should be less or equal
  697 $config['max_group_members'] = 0;
  698 
  699 // Name your service. This is displayed on the login screen and in the window title
  700 $config['product_name'] = 'Roundcube Webmail';
  701 
  702 // Add this user-agent to message headers when sending. Default: not set.
  703 $config['useragent'] = null;
  704 
  705 // try to load host-specific configuration
  706 // see https://github.com/roundcube/roundcubemail/wiki/Configuration:-Multi-Domain-Setup
  707 // for more details
  708 $config['include_host_config'] = false;
  709 
  710 // path to a text file which will be added to each sent message
  711 // paths are relative to the Roundcube root folder
  712 $config['generic_message_footer'] = '';
  713 
  714 // path to a text file which will be added to each sent HTML message
  715 // paths are relative to the Roundcube root folder
  716 $config['generic_message_footer_html'] = '';
  717 
  718 // add a received header to outgoing mails containing the creators IP and hostname
  719 $config['http_received_header'] = false;
  720 
  721 // Whether or not to encrypt the IP address and the host name
  722 // these could, in some circles, be considered as sensitive information;
  723 // however, for the administrator, these could be invaluable help
  724 // when tracking down issues.
  725 $config['http_received_header_encrypt'] = false;
  726 
  727 // number of chars allowed for line when wrapping text.
  728 // text wrapping is done when composing/sending messages
  729 $config['line_length'] = 72;
  730 
  731 // send plaintext messages as format=flowed
  732 $config['send_format_flowed'] = true;
  733 
  734 // According to RFC2298, return receipt envelope sender address must be empty.
  735 // If this option is true, Roundcube will use user's identity as envelope sender for MDN responses.
  736 $config['mdn_use_from'] = false;
  737 
  738 // Set identities access level:
  739 // 0 - many identities with possibility to edit all params
  740 // 1 - many identities with possibility to edit all params but not email address
  741 // 2 - one identity with possibility to edit all params
  742 // 3 - one identity with possibility to edit all params but not email address
  743 // 4 - one identity with possibility to edit only signature
  744 $config['identities_level'] = 0;
  745 
  746 // Maximum size of uploaded image in kilobytes
  747 // Images (in html signatures) are stored in database as data URIs
  748 $config['identity_image_size'] = 64;
  749 
  750 // Mimetypes supported by the browser.
  751 // Attachments of these types will open in a preview window.
  752 // Either a comma-separated list or an array. Default list includes:
  753 //     text/plain,text/html,
  754 //     image/jpeg,image/gif,image/png,image/bmp,image/tiff,image/webp,
  755 //     application/x-javascript,application/pdf,application/x-shockwave-flash
  756 $config['client_mimetypes'] = null;
  757 
  758 // Path to a local mime magic database file for PHPs finfo extension.
  759 // Set to null if the default path should be used.
  760 $config['mime_magic'] = null;
  761 
  762 // Absolute path to a local mime.types mapping table file.
  763 // This is used to derive mime-types from the filename extension or vice versa.
  764 // Such a file is usually part of the apache webserver. If you don't find a file named mime.types on your system,
  765 // download it from http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
  766 $config['mime_types'] = null;
  767 
  768 // path to imagemagick identify binary (if not set we'll use Imagick or GD extensions)
  769 $config['im_identify_path'] = null;
  770 
  771 // path to imagemagick convert binary (if not set we'll use Imagick or GD extensions)
  772 $config['im_convert_path'] = null;
  773 
  774 // Size of thumbnails from image attachments displayed below the message content.
  775 // Note: whether images are displayed at all depends on the 'inline_images' option.
  776 // Set to 0 to display images in full size.
  777 $config['image_thumbnail_size'] = 240;
  778 
  779 // maximum size of uploaded contact photos in pixel
  780 $config['contact_photo_size'] = 160;
  781 
  782 // Enable DNS checking for e-mail address validation
  783 $config['email_dns_check'] = false;
  784 
  785 // Disables saving sent messages in Sent folder (like gmail) (Default: false)
  786 // Note: useful when SMTP server stores sent mail in user mailbox
  787 $config['no_save_sent_messages'] = false;
  788 
  789 // Improve system security by using special URL with security token.
  790 // This can be set to a number defining token length. Default: 16.
  791 // Warning: This requires http server configuration. Sample:
  792 //    RewriteRule ^/roundcubemail/[a-zA-Z0-9]{16}/(.*) /roundcubemail/$1 [PT]
  793 //    Alias /roundcubemail /var/www/roundcubemail/
  794 // Note: Use assets_path to not prevent the browser from caching assets
  795 $config['use_secure_urls'] = false;
  796 
  797 // Allows to define separate server/path for image/js/css files
  798 // Warning: If the domain is different cross-domain access to some
  799 // resources need to be allowed
  800 // Sample:
  801 //    <FilesMatch ".(eot|ttf|woff)">
  802 //    Header set Access-Control-Allow-Origin "*"
  803 //    </FilesMatch>
  804 $config['assets_path'] = '';
  805 
  806 // While assets_path is for the browser, assets_dir informs
  807 // PHP code about the location of asset files in filesystem
  808 $config['assets_dir'] = '';
  809 
  810 // Options passed when creating Guzzle HTTP client, used to fetch remote content
  811 // For example:
  812 // [
  813 //   'timeout' => 10,
  814 //   'proxy' => 'tcp://localhost:8125',
  815 // ]
  816 $config['http_client'] = [];
  817 
  818 // List of supported subject prefixes for a message reply
  819 // This list is used to clean the subject when replying or sorting messages
  820 $config['subject_reply_prefixes'] = ['Re:'];
  821 
  822 // List of supported subject prefixes for a message forward
  823 // This list is used to clean the subject when forwarding or sorting messages
  824 $config['subject_forward_prefixes'] = ['Fwd:', 'Fw:'];
  825 
  826 // Prefix to use in subject when replying to a message
  827 $config['response_prefix'] = 'Re:';
  828 
  829 // Prefix to use in subject when forwarding a message
  830 $config['forward_prefix'] = 'Fwd:';
  831 
  832 // ----------------------------------
  833 // PLUGINS
  834 // ----------------------------------
  835 
  836 // List of active plugins (in plugins/ directory)
  837 $config['plugins'] = [];
  838 
  839 // ----------------------------------
  840 // USER INTERFACE
  841 // ----------------------------------
  842 
  843 // default messages sort column. Use empty value for default server's sorting,
  844 // or 'arrival', 'date', 'subject', 'from', 'to', 'fromto', 'size', 'cc'
  845 $config['message_sort_col'] = '';
  846 
  847 // default messages sort order
  848 $config['message_sort_order'] = 'DESC';
  849 
  850 // These cols are shown in the message list. Available cols are:
  851 // subject, from, to, fromto, cc, replyto, date, size, status, flag, attachment, priority
  852 $config['list_cols'] = ['subject', 'status', 'fromto', 'date', 'size', 'flag', 'attachment'];
  853 
  854 // the default locale setting (leave empty for auto-detection)
  855 // RFC1766 formatted language name like en_US, de_DE, de_CH, fr_FR, pt_BR
  856 $config['language'] = null;
  857 
  858 // use this format for date display (date or strftime format)
  859 $config['date_format'] = 'Y-m-d';
  860 
  861 // give this choice of date formats to the user to select from
  862 // Note: do not use ambiguous formats like m/d/Y
  863 $config['date_formats'] = ['Y-m-d', 'Y/m/d', 'Y.m.d', 'd-m-Y', 'd/m/Y', 'd.m.Y', 'j.n.Y'];
  864 
  865 // use this format for time display (date or strftime format)
  866 $config['time_format'] = 'H:i';
  867 
  868 // give this choice of time formats to the user to select from
  869 $config['time_formats'] = ['G:i', 'H:i', 'g:i a', 'h:i A'];
  870 
  871 // use this format for short date display (derived from date_format and time_format)
  872 $config['date_short'] = 'D H:i';
  873 
  874 // use this format for detailed date/time formatting (derived from date_format and time_format)
  875 $config['date_long'] = 'Y-m-d H:i';
  876 
  877 // store draft message is this mailbox
  878 // leave blank if draft messages should not be stored
  879 // NOTE: Use folder names with namespace prefix (INBOX. on Courier-IMAP)
  880 $config['drafts_mbox'] = 'Drafts';
  881 
  882 // store spam messages in this mailbox
  883 // NOTE: Use folder names with namespace prefix (INBOX. on Courier-IMAP)
  884 $config['junk_mbox'] = 'Junk';
  885 
  886 // store sent message is this mailbox
  887 // leave blank if sent messages should not be stored
  888 // NOTE: Use folder names with namespace prefix (INBOX. on Courier-IMAP)
  889 $config['sent_mbox'] = 'Sent';
  890 
  891 // move messages to this folder when deleting them
  892 // leave blank if they should be deleted directly
  893 // NOTE: Use folder names with namespace prefix (INBOX. on Courier-IMAP)
  894 $config['trash_mbox'] = 'Trash';
  895 
  896 // automatically create the above listed default folders on user login
  897 $config['create_default_folders'] = false;
  898 
  899 // protect the default folders from renames, deletes, and subscription changes
  900 $config['protect_default_folders'] = true;
  901 
  902 // Disable localization of the default folder names listed above
  903 $config['show_real_foldernames'] = false;
  904 
  905 // if in your system 0 quota means no limit set this option to true
  906 $config['quota_zero_as_unlimited'] = false;
  907 
  908 // Make use of the built-in spell checker.
  909 $config['enable_spellcheck'] = false;
  910 
  911 // Enables spellchecker exceptions dictionary.
  912 // Setting it to 'shared' will make the dictionary shared by all users.
  913 $config['spellcheck_dictionary'] = false;
  914 
  915 // Set the spell checking engine. Possible values:
  916 // - 'googie'  - the default (also used for connecting to Nox Spell Server, see 'spellcheck_uri' setting)
  917 // - 'pspell'  - requires the PHP Pspell module and aspell installed
  918 // - 'enchant' - requires the PHP Enchant module
  919 // - 'atd'     - install your own After the Deadline server or check with the people at http://www.afterthedeadline.com before using their API
  920 // Since Google shut down their public spell checking service, the default settings
  921 // connect to http://spell.roundcube.net which is a hosted service provided by Roundcube.
  922 // You can connect to any other googie-compliant service by setting 'spellcheck_uri' accordingly.
  923 $config['spellcheck_engine'] = 'googie';
  924 
  925 // For locally installed Nox Spell Server or After the Deadline services,
  926 // please specify the URI to call it.
  927 // Get Nox Spell Server from http://orangoo.com/labs/?page_id=72 or
  928 // the After the Deadline package from http://www.afterthedeadline.com.
  929 // Leave empty to use the public API of service.afterthedeadline.com
  930 $config['spellcheck_uri'] = '';
  931 
  932 // These languages can be selected for spell checking.
  933 // Configure as a PHP style hash array: ['en'=>'English', 'de'=>'Deutsch'];
  934 // Leave empty for default set of available language.
  935 $config['spellcheck_languages'] = null;
  936 
  937 // Makes that words with all letters capitalized will be ignored (e.g. GOOGLE)
  938 $config['spellcheck_ignore_caps'] = false;
  939 
  940 // Makes that words with numbers will be ignored (e.g. g00gle)
  941 $config['spellcheck_ignore_nums'] = false;
  942 
  943 // Makes that words with symbols will be ignored (e.g. g@@gle)
  944 $config['spellcheck_ignore_syms'] = false;
  945 
  946 // Number of lines at the end of a message considered to contain the signature.
  947 // Increase this value if signatures are not properly detected and colored
  948 $config['sig_max_lines'] = 15;
  949 
  950 // don't let users set pagesize to more than this value if set
  951 $config['max_pagesize'] = 200;
  952 
  953 // Minimal value of user's 'refresh_interval' setting (in seconds)
  954 $config['min_refresh_interval'] = 60;
  955 
  956 // Specifies for how many seconds the Undo button will be available
  957 // after object delete action. Currently used with supporting address book sources.
  958 // Setting it to 0, disables the feature.
  959 $config['undo_timeout'] = 0;
  960 
  961 // A static list of canned responses which are immutable for the user
  962 $config['compose_responses_static'] = [
  963 //  ['name' => 'Canned Response 1', 'text' => 'Static Response One'],
  964 //  ['name' => 'Canned Response 2', 'text' => 'Static Response Two'],
  965 ];
  966 
  967 // List of HKP key servers for PGP public key lookups in Enigma/Mailvelope
  968 // Note: Lookup is client-side, so the server must support Cross-Origin Resource Sharing
  969 $config['keyservers'] = ['keys.openpgp.org'];
  970 
  971 // Enables use of the Main Keyring in Mailvelope? If disabled, a per-site keyring
  972 // will be used. This is set to false for backwards compatibility.
  973 $config['mailvelope_main_keyring'] = false;
  974 
  975 // Mailvelope RSA bit size for newly generated keys, either 2048 or 4096.
  976 // It maybe desirable to use 2048 for sites with many mobile users.
  977 $config['mailvelope_keysize'] = 4096;
  978 
  979 // ----------------------------------
  980 // ADDRESSBOOK SETTINGS
  981 // ----------------------------------
  982 
  983 // This indicates which type of address book to use. Possible choices:
  984 // 'sql' - built-in sql addressbook enabled (default),
  985 // ''    - built-in sql addressbook disabled.
  986 //         Still LDAP or plugin-added addressbooks will be available.
  987 //         BC Note: The value can actually be anything except 'sql', it does not matter.
  988 $config['address_book_type'] = 'sql';
  989 
  990 // In order to enable public ldap search, configure an array like the Verisign
  991 // example further below. if you would like to test, simply uncomment the example.
  992 // Array key must contain only safe characters, ie. a-zA-Z0-9_
  993 $config['ldap_public'] = [];
  994 
  995 // If you are going to use LDAP for individual address books, you will need to
  996 // set 'user_specific' to true and use the variables to generate the appropriate DNs to access it.
  997 //
  998 // The recommended directory structure for LDAP is to store all the address book entries
  999 // under the users main entry, e.g.:
 1000 //
 1001 //  o=root
 1002 //   ou=people
 1003 //    uid=user@domain
 1004 //  mail=contact@contactdomain
 1005 //
 1006 // So the base_dn would be uid=%fu,ou=people,o=root
 1007 // The bind_dn would be the same as based_dn or some super user login.
 1008 /*
 1009  * example config for Verisign directory
 1010  *
 1011 $config['ldap_public']['Verisign'] = [
 1012   'name'          => 'Verisign.com',
 1013   // Replacement variables supported in host names:
 1014   // %h - user's IMAP hostname
 1015   // %n - hostname ($_SERVER['SERVER_NAME'])
 1016   // %t - hostname without the first part
 1017   // %d - domain (http hostname $_SERVER['HTTP_HOST'] without the first part)
 1018   // %z - IMAP domain (IMAP hostname without the first part)
 1019   // For example %n = mail.domain.tld, %t = domain.tld
 1020   // Note: Host can also be a full URI e.g. ldaps://hostname.local:636 (for SSL)
 1021   'hosts'         => array('directory.verisign.com'),
 1022   'port'          => 389,
 1023   'use_tls'       => false,
 1024   'ldap_version'  => 3,       // using LDAPv3
 1025   'network_timeout' => 10,    // The timeout (in seconds) for connect + bind attempts. This is only supported in PHP >= 5.3.0 with OpenLDAP 2.x
 1026   'user_specific' => false,   // If true the base_dn, bind_dn and bind_pass default to the user's IMAP login.
 1027   // When 'user_specific' is enabled following variables can be used in base_dn/bind_dn config:
 1028   // %fu - The full username provided, assumes the username is an email
 1029   //       address, uses the username_domain value if not an email address.
 1030   // %u  - The username prior to the '@'.
 1031   // %d  - The domain name after the '@'.
 1032   // %dc - The domain name hierarchal string e.g. "dc=test,dc=domain,dc=com"
 1033   // %dn - DN found by ldap search when search_filter/search_base_dn are used
 1034   'base_dn'       => '',
 1035   'bind_dn'       => '',
 1036   'bind_pass'     => '',
 1037   // It's possible to bind for an individual address book
 1038   // The login name is used to search for the DN to bind with
 1039   'search_base_dn' => '',
 1040   'search_filter'  => '',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
 1041   // DN and password to bind as before searching for bind DN, if anonymous search is not allowed
 1042   'search_bind_dn' => '',
 1043   'search_bind_pw' => '',
 1044   // Base DN and filter used for resolving the user's domain root DN which feeds the %dc variables
 1045   // Leave empty to skip this lookup and derive the root DN from the username domain
 1046   'domain_base_dn' => '',
 1047   'domain_filter'  => '',
 1048   // Optional map of replacement strings => attributes used when binding for an individual address book
 1049   'search_bind_attrib' => [],  // e.g. ['%udc' => 'ou']
 1050   // Default for %dn variable if search doesn't return DN value
 1051   'search_dn_default' => '',
 1052   // Optional authentication identifier to be used as SASL authorization proxy
 1053   // bind_dn need to be empty
 1054   'auth_cid'       => '',
 1055   // SASL authentication method (for proxy auth), e.g. DIGEST-MD5
 1056   'auth_method'    => '',
 1057   // Indicates if the addressbook shall be hidden from the list.
 1058   // With this option enabled you can still search/view contacts.
 1059   'hidden'        => false,
 1060   // Indicates if the addressbook shall not list contacts but only allows searching.
 1061   'searchonly'    => false,
 1062   // Indicates if we can write to the LDAP directory or not.
 1063   // If writable is true then these fields need to be populated:
 1064   // LDAP_Object_Classes, required_fields, LDAP_rdn
 1065   'writable'       => false,
 1066   // To create a new contact these are the object classes to specify
 1067   // (or any other classes you wish to use).
 1068   'LDAP_Object_Classes' => ['top', 'inetOrgPerson'],
 1069   // The RDN field that is used for new entries, this field needs
 1070   // to be one of the search_fields, the base of base_dn is appended
 1071   // to the RDN to insert into the LDAP directory.
 1072   'LDAP_rdn'       => 'cn',
 1073   // The required fields needed to build a new contact as required by
 1074   // the object classes (can include additional fields not required by the object classes).
 1075   'required_fields' => ['cn', 'sn', 'mail'],
 1076   'search_fields'   => ['mail', 'cn'],  // fields to search in
 1077   // mapping of contact fields to directory attributes
 1078   //   1. for every attribute one can specify the number of values (limit) allowed.
 1079   //      default is 1, a wildcard * means unlimited
 1080   //   2. another possible parameter is separator character for composite fields
 1081   //   3. it's possible to define field format for write operations, e.g. for date fields
 1082   //      example: 'birthday:date[YmdHis\\Z]'
 1083   'fieldmap' => [
 1084     // Roundcube  => LDAP:limit
 1085     'name'        => 'cn',
 1086     'surname'     => 'sn',
 1087     'firstname'   => 'givenName',
 1088     'jobtitle'    => 'title',
 1089     'email'       => 'mail:*',
 1090     'phone:home'  => 'homePhone',
 1091     'phone:work'  => 'telephoneNumber',
 1092     'phone:mobile' => 'mobile',
 1093     'phone:pager' => 'pager',
 1094     'phone:workfax' => 'facsimileTelephoneNumber',
 1095     'street'      => 'street',
 1096     'zipcode'     => 'postalCode',
 1097     'region'      => 'st',
 1098     'locality'    => 'l',
 1099     // if you country is a complex object, you need to configure 'sub_fields' below
 1100     'country'      => 'c',
 1101     'organization' => 'o',
 1102     'department'   => 'ou',
 1103     'jobtitle'     => 'title',
 1104     'notes'        => 'description',
 1105     'photo'        => 'jpegPhoto',
 1106     // these currently don't work:
 1107     // 'manager'       => 'manager',
 1108     // 'assistant'     => 'secretary',
 1109   ],
 1110   // Map of contact sub-objects (attribute name => objectClass(es)), e.g. 'c' => 'country'
 1111   'sub_fields' => [],
 1112   // Generate values for the following LDAP attributes automatically when creating a new record
 1113   'autovalues' => [
 1114     // 'uid'  => 'md5(microtime())',               // You may specify PHP code snippets which are then eval'ed
 1115     // 'mail' => '{givenname}.{sn}@mydomain.com',  // or composite strings with placeholders for existing attributes
 1116   ],
 1117   'sort'           => 'cn',         // The field to sort the listing by.
 1118   'scope'          => 'sub',        // search mode: sub|base|list
 1119   'filter'         => '(objectClass=inetOrgPerson)',      // used for basic listing (if not empty) and will be &'d with search queries. example: status=act
 1120   'fuzzy_search'   => true,         // server allows wildcard search
 1121   'vlv'            => false,        // Enable Virtual List View to more efficiently fetch paginated data (if server supports it)
 1122   'vlv_search'     => false,        // Use Virtual List View functions for autocompletion searches (if server supports it)
 1123   'numsub_filter'  => '(objectClass=organizationalUnit)',   // with VLV, we also use numSubOrdinates to query the total number of records. Set this filter to get all numSubOrdinates attributes for counting
 1124   'config_root_dn' => 'cn=config',  // Root DN to search config entries (e.g. vlv indexes)
 1125   'sizelimit'      => '0',          // Enables you to limit the count of entries fetched. Setting this to 0 means no limit.
 1126   'timelimit'      => '0',          // Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit.
 1127   'referrals'      => false,        // Sets the LDAP_OPT_REFERRALS option. Mostly used in multi-domain Active Directory setups
 1128   'dereference'    => 0,            // Sets the LDAP_OPT_DEREF option. One of: LDAP_DEREF_NEVER, LDAP_DEREF_SEARCHING, LDAP_DEREF_FINDING, LDAP_DEREF_ALWAYS
 1129                                     // Used where addressbook contains aliases to objects elsewhere in the LDAP tree.
 1130 
 1131   // definition for contact groups (uncomment if no groups are supported)
 1132   // for the groups base_dn, the user replacements %fu, %u, %d and %dc work as for base_dn (see above)
 1133   // if the groups base_dn is empty, the contact base_dn is used for the groups as well
 1134   // -> in this case, assure that groups and contacts are separated due to the concerning filters!
 1135   'groups'  => [
 1136     'base_dn'           => '',
 1137     'scope'             => 'sub',       // Search mode: sub|base|list
 1138     'filter'            => '(objectClass=groupOfNames)',
 1139     'object_classes'    => ['top', 'groupOfNames'],   // Object classes to be assigned to new groups
 1140     'member_attr'       => 'member',   // Name of the default member attribute, e.g. uniqueMember
 1141     'name_attr'         => 'cn',       // Attribute to be used as group name
 1142     'email_attr'        => 'mail',     // Group email address attribute (e.g. for mailing lists)
 1143     'member_filter'     => '(objectclass=*)',  // Optional filter to use when querying for group members
 1144     'vlv'               => false,      // Use VLV controls to list groups
 1145     'class_member_attr' => [      // Mapping of group object class to member attribute used in these objects
 1146       'groupofnames'       => 'member',
 1147       'groupofuniquenames' => 'uniquemember'
 1148     ],
 1149   ],
 1150   // this configuration replaces the regular groups listing in the directory tree with
 1151   // a hard-coded list of groups, each listing entries with the configured base DN and filter.
 1152   // if the 'groups' option from above is set, it'll be shown as the first entry with the name 'Groups'
 1153   'group_filters' => [
 1154     'departments' => [
 1155       'name'    => 'Company Departments',
 1156       'scope'   => 'list',
 1157       'base_dn' => 'ou=Groups,dc=mydomain,dc=com',
 1158       'filter'  => '(|(objectclass=groupofuniquenames)(objectclass=groupofurls))',
 1159       'name_attr' => 'cn',
 1160     ],
 1161     'customers' => [
 1162       'name'    => 'Customers',
 1163       'scope'   => 'sub',
 1164       'base_dn' => 'ou=Customers,dc=mydomain,dc=com',
 1165       'filter'  => '(objectClass=inetOrgPerson)',
 1166       'name_attr' => 'sn',
 1167     ],
 1168   ],
 1169 ];
 1170 */
 1171 
 1172 // An ordered array of the ids of the addressbooks that should be searched
 1173 // when populating address autocomplete fields server-side. ex: ['sql','Verisign'];
 1174 $config['autocomplete_addressbooks'] = ['sql'];
 1175 
 1176 // The minimum number of characters required to be typed in an autocomplete field
 1177 // before address books will be searched. Most useful for LDAP directories that
 1178 // may need to do lengthy results building given overly-broad searches
 1179 $config['autocomplete_min_length'] = 1;
 1180 
 1181 // Number of parallel autocomplete requests.
 1182 // If there's more than one address book, n parallel (async) requests will be created,
 1183 // where each request will search in one address book. By default (0), all address
 1184 // books are searched in one request.
 1185 $config['autocomplete_threads'] = 0;
 1186 
 1187 // Max. number of entries in autocomplete popup. Default: 15.
 1188 $config['autocomplete_max'] = 15;
 1189 
 1190 // show address fields in this order
 1191 // available placeholders: {street}, {locality}, {zipcode}, {country}, {region}
 1192 $config['address_template'] = '{street}<br/>{locality} {zipcode}<br/>{country} {region}';
 1193 
 1194 // Matching mode for addressbook search (including autocompletion)
 1195 // 0 - partial (*abc*), default
 1196 // 1 - strict (abc)
 1197 // 2 - prefix (abc*)
 1198 // Note: For LDAP sources fuzzy_search must be enabled to use 'partial' or 'prefix' mode
 1199 $config['addressbook_search_mode'] = 0;
 1200 
 1201 // List of fields used on contacts list and for autocompletion searches
 1202 // Warning: These are field names not LDAP attributes (see 'fieldmap' setting)!
 1203 $config['contactlist_fields'] = ['name', 'firstname', 'surname', 'email'];
 1204 
 1205 // Template of contact entry on the autocompletion list.
 1206 // You can use contact fields as: name, email, organization, department, etc.
 1207 // See program/actions/contacts/index.php for a list
 1208 $config['contact_search_name'] = '{name} <{email}>';
 1209 
 1210 // Contact mode. If your contacts are mostly business, switch it to 'business'.
 1211 // This will prioritize form fields related to 'work' (instead of 'home').
 1212 // Default: 'private'.
 1213 $config['contact_form_mode'] = 'private';
 1214 
 1215 // The addressbook source to store automatically collected recipients in.
 1216 // Default: true (the built-in "Collected recipients" addressbook, source id = '1')
 1217 // Note: It can be set to any writeable addressbook, e.g. 'sql'
 1218 $config['collected_recipients'] = true;
 1219 
 1220 // The addressbook source to store trusted senders in.
 1221 // Default: true (the built-in "Trusted senders" addressbook, source id = '2')
 1222 // Note: It can be set to any writeable addressbook, e.g. 'sql'
 1223 $config['collected_senders'] = true;
 1224 
 1225 
 1226 // ----------------------------------
 1227 // USER PREFERENCES
 1228 // ----------------------------------
 1229 
 1230 // Use this charset as fallback for message decoding
 1231 $config['default_charset'] = 'ISO-8859-1';
 1232 
 1233 // Skin name: folder from skins/
 1234 $config['skin'] = 'elastic';
 1235 
 1236 // Limit skins available for the user.
 1237 // Note: When not empty, it should include the default skin set in 'skin' option.
 1238 $config['skins_allowed'] = [];
 1239 
 1240 // Enables using standard browser windows (that can be handled as tabs)
 1241 // instead of popup windows
 1242 $config['standard_windows'] = false;
 1243 
 1244 // show up to X items in messages list view
 1245 $config['mail_pagesize'] = 50;
 1246 
 1247 // show up to X items in contacts list view
 1248 $config['addressbook_pagesize'] = 50;
 1249 
 1250 // sort contacts by this col (preferably either one of name, firstname, surname)
 1251 $config['addressbook_sort_col'] = 'surname';
 1252 
 1253 // The way how contact names are displayed in the list.
 1254 // 0: prefix firstname middlename surname suffix (only if display name is not set)
 1255 // 1: firstname middlename surname
 1256 // 2: surname firstname middlename
 1257 // 3: surname, firstname middlename
 1258 $config['addressbook_name_listing'] = 0;
 1259 
 1260 // use this timezone to display date/time
 1261 // valid timezone identifiers are listed here: php.net/manual/en/timezones.php
 1262 // 'auto' will use the browser's timezone settings
 1263 $config['timezone'] = 'auto';
 1264 
 1265 // prefer displaying HTML messages
 1266 $config['prefer_html'] = true;
 1267 
 1268 // Display remote resources (inline images, styles) in HTML messages. Default: 0.
 1269 // 0 - Never, always ask
 1270 // 1 - Allow from my contacts (all writeable addressbooks + collected senders and recipients)
 1271 // 2 - Always allow
 1272 // 3 - Allow from trusted senders only
 1273 $config['show_images'] = 0;
 1274 
 1275 // open messages in new window
 1276 $config['message_extwin'] = false;
 1277 
 1278 // open message compose form in new window
 1279 $config['compose_extwin'] = false;
 1280 
 1281 // compose html formatted messages by default
 1282 //  0 - never,
 1283 //  1 - always,
 1284 //  2 - on reply to HTML message,
 1285 //  3 - on forward or reply to HTML message
 1286 //  4 - always, except when replying to plain text message
 1287 $config['htmleditor'] = 0;
 1288 
 1289 // save copies of compose messages in the browser's local storage
 1290 // for recovery in case of browser crashes and session timeout.
 1291 $config['compose_save_localstorage'] = true;
 1292 
 1293 // show pretty dates as standard
 1294 $config['prettydate'] = true;
 1295 
 1296 // save compose message every 300 seconds (5min)
 1297 $config['draft_autosave'] = 300;
 1298 
 1299 // Interface layout. Default: 'widescreen'.
 1300 //  'widescreen' - three columns
 1301 //  'desktop'    - two columns, preview on bottom
 1302 //  'list'       - two columns, no preview
 1303 $config['layout'] = 'widescreen';
 1304 
 1305 // Mark as read when viewing a message (delay in seconds)
 1306 // Set to -1 if messages should not be marked as read
 1307 $config['mail_read_time'] = 0;
 1308 
 1309 // Clear Trash on logout
 1310 $config['logout_purge'] = false;
 1311 
 1312 // Compact INBOX on logout
 1313 $config['logout_expunge'] = false;
 1314 
 1315 // Display attached images below the message body
 1316 $config['inline_images'] = true;
 1317 
 1318 // Encoding of long/non-ascii attachment names:
 1319 // 0 - Full RFC 2231 compatible
 1320 // 1 - RFC 2047 for 'name' and RFC 2231 for 'filename' parameter (Thunderbird's default)
 1321 // 2 - Full 2047 compatible
 1322 $config['mime_param_folding'] = 1;
 1323 
 1324 // Set true if deleted messages should not be displayed
 1325 // This will make the application run slower
 1326 $config['skip_deleted'] = false;
 1327 
 1328 // Set true to Mark deleted messages as read as well as deleted
 1329 // False means that a message's read status is not affected by marking it as deleted
 1330 $config['read_when_deleted'] = true;
 1331 
 1332 // Set to true to never delete messages immediately
 1333 // Use 'Purge' to remove messages marked as deleted
 1334 $config['flag_for_deletion'] = false;
 1335 
 1336 // Default interval for auto-refresh requests (in seconds)
 1337 // These are requests for system state updates e.g. checking for new messages, etc.
 1338 // Setting it to 0 disables the feature.
 1339 $config['refresh_interval'] = 60;
 1340 
 1341 // If true all folders will be checked for recent messages
 1342 $config['check_all_folders'] = false;
 1343 
 1344 // If true, after message/contact delete/move, the next message/contact will be displayed
 1345 $config['display_next'] = true;
 1346 
 1347 // Default messages listing mode. One of 'threads' or 'list'.
 1348 $config['default_list_mode'] = 'list';
 1349 
 1350 // 0 - Do not expand threads
 1351 // 1 - Expand all threads automatically
 1352 // 2 - Expand only threads with unread messages
 1353 $config['autoexpand_threads'] = 0;
 1354 
 1355 // When replying:
 1356 // -1 - don't cite the original message
 1357 // 0  - place cursor below the original message
 1358 // 1  - place cursor above original message (top posting)
 1359 // 2  - place cursor above original message (top posting), but do not indent the quote
 1360 $config['reply_mode'] = 0;
 1361 
 1362 // When replying strip original signature from message
 1363 $config['strip_existing_sig'] = true;
 1364 
 1365 // Show signature:
 1366 // 0 - Never
 1367 // 1 - Always
 1368 // 2 - New messages only
 1369 // 3 - Forwards and Replies only
 1370 $config['show_sig'] = 1;
 1371 
 1372 // By default the signature is placed depending on cursor position (reply_mode).
 1373 // Sometimes it might be convenient to start the reply on top but keep
 1374 // the signature below the quoted text (sig_below = true).
 1375 $config['sig_below'] = false;
 1376 
 1377 // Enables adding of standard separator to the signature
 1378 $config['sig_separator'] = true;
 1379 
 1380 // Use MIME encoding (quoted-printable) for 8bit characters in message body
 1381 $config['force_7bit'] = false;
 1382 
 1383 // Default fields configuration for mail search.
 1384 // The array can contain a per-folder list of header fields which should be considered when searching
 1385 // The entry with key '*' stands for all folders which do not have a specific list set.
 1386 // Supported fields: subject, from, to, cc, bcc, body, text.
 1387 // Please note that folder names should to be in sync with $config['*_mbox'] options
 1388 $config['search_mods'] = null;  // Example: ['*' => ['subject'=>1, 'from'=>1], 'Sent' => ['subject'=>1, 'to'=>1]];
 1389 
 1390 // Defaults of the addressbook search field configuration.
 1391 $config['addressbook_search_mods'] = null;  // Example: ['name'=>1, 'firstname'=>1, 'surname'=>1, 'email'=>1, '*'=>1];
 1392 
 1393 // Directly delete messages in Junk instead of moving to Trash
 1394 $config['delete_junk'] = false;
 1395 
 1396 // Behavior if a received message requests a message delivery notification (read receipt)
 1397 // 0 = ask the user,
 1398 // 1 = send automatically,
 1399 // 2 = ignore (never send or ask)
 1400 // 3 = send automatically if sender is in my contacts, otherwise ask the user
 1401 // 4 = send automatically if sender is in my contacts, otherwise ignore
 1402 // 5 = send automatically if sender is a trusted sender, otherwise ask the user
 1403 // 6 = send automatically if sender is a trusted sender, otherwise ignore
 1404 $config['mdn_requests'] = 0;
 1405 
 1406 // Return receipt checkbox default state
 1407 $config['mdn_default'] = 0;
 1408 
 1409 // Delivery Status Notification checkbox default state
 1410 // Note: This can be used only if smtp_server is non-empty
 1411 $config['dsn_default'] = 0;
 1412 
 1413 // Place replies in the folder of the message being replied to
 1414 $config['reply_same_folder'] = false;
 1415 
 1416 // Sets default mode of Forward feature to "forward as attachment"
 1417 $config['forward_attachment'] = false;
 1418 
 1419 // Defines address book (internal index) to which new contacts will be added
 1420 // By default it is the first writeable addressbook.
 1421 // Note: Use '0' for built-in address book.
 1422 $config['default_addressbook'] = null;
 1423 
 1424 // Enables spell checking before sending a message.
 1425 $config['spellcheck_before_send'] = false;
 1426 
 1427 // Skip alternative email addresses in autocompletion (show one address per contact)
 1428 $config['autocomplete_single'] = false;
 1429 
 1430 // Default font for composed HTML message.
 1431 // Supported values: Andale Mono, Arial, Arial Black, Book Antiqua, Courier New,
 1432 // Georgia, Helvetica, Impact, Tahoma, Terminal, Times New Roman, Trebuchet MS, Verdana
 1433 $config['default_font'] = 'Verdana';
 1434 
 1435 // Default font size for composed HTML message.
 1436 // Supported sizes: 8pt, 10pt, 12pt, 14pt, 18pt, 24pt, 36pt
  $config['default_font_size'] = '10pt';
  
  // Enables display of email address with name instead of a name (and address in title)
  $config['message_show_email'] = false;
  
  // Default behavior of Reply-All button:
  // 0 - Reply-All always
  // 1 - Reply-List if mailing list is detected
  $config['reply_all_mode'] = 0;
